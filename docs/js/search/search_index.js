var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.291,1,1.822]],["body/modules/AppModule.html",[0,2.067,1,3.442,2,1.549,3,1.549,4,1.959,5,1.959,6,1.549,7,2.599,8,1.959,9,2.616,10,2.616,11,2.942,12,0.041,13,2.626,14,2.599,15,1.959,16,1.959,17,0.442,18,0.38,19,0.321,20,3.187,21,2.599,22,1,23,0.818,24,3.187,25,3.187,26,2.24,27,2.616,28,2.616,29,1.959,30,1.959,31,1.389,32,2.971,33,2.616,34,3.187,35,3.187,36,3.187,37,1.549,38,0.442,39,0.265,40,0.029,41,0.029]],["title/controllers/AuthController.html",[42,1.613,43,1.822]],["body/controllers/AuthController.html",[12,0.041,17,0.274,18,0.235,19,0.199,22,0.894,23,0.506,37,0.958,38,0.274,39,0.164,40,0.02,41,0.02,42,1.073,43,1.844,44,1.618,45,1.618,46,2.981,47,0.314,48,1.307,49,2.454,50,4.368,51,3.332,52,1.971,53,2.941,54,1.978,55,1.971,56,4.059,57,1.971,58,3,59,1.176,60,1.497,61,0.805,62,1.039,63,1.971,64,1.423,65,1.039,66,1.039,67,4.601,68,1.423,69,2.236,70,1.971,71,1.971,72,2.463,73,3,74,1.971,75,1.971,76,1.618,77,2.005,78,1.971,79,1.633,80,1.971,81,1.971,82,2.463,83,1.618,84,1.618,85,1.971,86,3,87,1.583,88,1.386,89,1.212,90,1.971,91,3,92,1.971,93,1.971,94,3,95,3,96,4.059,97,3,98,1.618,99,0.958,100,1.212,101,1.971,102,1.618,103,1.212,104,1.212,105,1.971,106,1.971,107,1.386,108,1.073,109,1.971,110,3.632,111,1.971,112,1.971,113,2.553,114,1.423,115,1.971,116,1.971,117,1.971,118,1.971,119,1.971,120,1.618,121,1.971,122,0.696,123,0.772,124,0.858,125,2.463,126,1.971,127,1.176,128,1.971,129,1.971,130,1.971,131,1.971,132,2.463,133,1.971]],["title/modules/AuthModule.html",[0,1.291,11,1.613]],["body/modules/AuthModule.html",[0,1.961,2,1.397,3,1.397,4,1.767,5,1.767,6,1.397,7,2.767,8,2.767,11,3.132,12,0.041,13,2.547,14,2.424,15,1.767,16,1.767,17,0.399,18,0.343,19,0.29,21,2.424,22,0.991,23,0.738,30,2.424,31,1.253,37,1.916,38,0.399,39,0.239,40,0.027,41,0.027,43,2.767,87,2.49,88,2.021,134,2.36,135,2.36,136,2.874,137,2.36,138,2.854,139,2.854,140,2.874,141,2.874,142,2.874,143,1.397,144,2.874,145,2.021,146,2.874,147,2.874,148,2.874]],["title/injectables/AuthService.html",[87,1.291,149,0.681]],["body/injectables/AuthService.html",[12,0.041,17,0.257,18,0.221,19,0.187,22,0.848,23,0.475,31,0.806,38,0.257,39,0.154,40,0.019,41,0.019,46,2.346,47,0.295,48,1.246,49,2.41,51,2.867,59,1.539,60,1.418,61,0.677,62,1.214,64,1.664,65,1.214,66,1.214,68,1.539,69,1.909,76,2.346,77,1.712,79,1.556,82,2.346,87,1.246,102,1.519,103,1.138,104,1.138,108,1.902,113,2.455,114,1.759,123,1.12,124,1.496,127,0.725,132,1.519,143,2.273,145,1.301,149,0.657,150,0.806,151,1.519,152,2.858,153,2.858,154,2.858,155,1.758,156,1.851,157,1.759,158,4.678,159,1.851,160,2.858,161,2.147,162,1.851,163,3.224,164,2.858,165,3.928,166,1.851,167,1.301,168,1.851,169,2.858,170,1.851,171,2.346,172,1.519,173,1.519,174,1.556,175,1.519,176,1.519,177,2.455,178,2.858,179,2.346,180,2.858,181,2.858,182,2.61,183,2.858,184,1.851,185,1.851,186,1.851,187,1.519,188,1.851,189,1.851,190,2.858,191,2.984,192,1.851,193,2.346,194,1.851,195,1.519,196,1.851,197,2.858,198,1.851,199,1.851,200,1.851,201,1.851,202,1.519,203,1.851,204,1.851]],["title/classes/CreateUserDto.html",[39,0.247,77,1.291]],["body/classes/CreateUserDto.html",[12,0.041,17,0.376,18,0.323,19,0.273,22,0.687,38,0.376,39,0.316,40,0.026,41,0.026,47,0.432,54,2.376,59,1.71,60,1.472,61,0.873,62,1.248,65,1.421,77,1.65,99,1.318,122,1.337,123,1.948,124,1.617,125,4.226,127,1.948,205,1.667,206,3.878,207,1.906,208,4.364,209,3.787,210,4.226,211,2.711,212,2.711,213,3.787,214,3.787,215,2.711,216,2.226,217,3.787,218,2.711,219,2.711,220,3.109,221,3.109,222,3.787,223,1.906,224,3.32,225,3.068]],["title/interfaces/IAuthPayload.html",[174,1.613,226,1.613]],["body/interfaces/IAuthPayload.html",[12,0.039,17,0.55,18,0.473,19,0.4,38,0.55,40,0.033,41,0.033,47,0.632,61,0.775,66,1.39,122,1.715,161,3.517,163,4.497,174,2.646,195,4.497,226,2.159,227,2.787,228,3.255,229,3.255]],["title/injectables/JwtAuthGuard.html",[100,1.822,149,0.681]],["body/injectables/JwtAuthGuard.html",[12,0.04,17,0.514,18,0.442,19,0.374,22,0.845,23,0.951,38,0.514,39,0.309,40,0.032,41,0.032,47,0.591,48,2.031,61,0.591,62,1.06,64,1.452,65,1.06,66,1.06,68,1.452,100,2.865,114,1.452,149,1.071,150,1.615,230,3.826,231,2.605,232,4.66,233,4.66,234,5.349,235,3.706,236,3.706,237,3.042,238,2.018,239,1.801,240,3.706,241,3.706]],["title/injectables/JwtStrategy.html",[138,1.613,149,0.681]],["body/injectables/JwtStrategy.html",[12,0.041,17,0.416,18,0.358,19,0.302,22,0.963,23,0.77,31,1.306,38,0.416,39,0.25,40,0.028,41,0.028,47,0.478,48,1.768,49,2.235,61,0.647,62,1.16,64,1.59,65,1.16,66,1.16,68,1.175,108,1.632,114,1.175,138,2.209,143,2.58,149,0.932,150,1.306,155,2.495,157,2.127,167,2.107,173,2.461,174,2.684,175,2.461,176,2.461,177,2.107,187,2.461,193,2.461,238,1.632,239,1.457,242,2.461,243,3.331,244,2.997,245,2.997,246,4.057,247,2.997,248,2.997,249,2.461,250,2.107,251,2.461,252,2.461,253,2.461,254,2.461,255,2.997,256,2.997,257,2.997,258,2.997,259,2.997,260,2.997]],["title/injectables/LocalAuthenticationGuard.html",[89,1.822,149,0.681]],["body/injectables/LocalAuthenticationGuard.html",[12,0.04,17,0.578,18,0.497,19,0.42,22,0.908,23,1.069,38,0.578,39,0.347,40,0.034,41,0.034,89,3.078,149,1.15,150,1.815,231,2.927,237,3.419,238,2.268,239,2.024,261,3.419,262,4.164]],["title/injectables/LocalStrategy.html",[139,1.613,149,0.681]],["body/injectables/LocalStrategy.html",[12,0.041,17,0.433,18,0.372,19,0.315,22,0.947,23,0.801,38,0.433,39,0.26,40,0.028,41,0.028,47,0.498,48,1.817,49,2.281,60,0.892,61,0.665,62,1.192,64,1.634,65,1.192,66,1.192,68,1.223,69,2.026,87,2.341,88,2.194,104,1.919,107,2.194,114,1.223,123,1.634,124,1.536,127,1.963,139,2.27,149,0.958,150,1.36,155,1.919,238,1.699,239,1.517,243,3.422,249,2.562,250,2.194,252,2.562,253,2.562,254,2.562,263,2.562,264,3.121,265,3.121,266,4.169,267,3.121,268,2.562,269,3.121,270,3.121]],["title/classes/LoginDto.html",[39,0.247,271,2.083]],["body/classes/LoginDto.html",[12,0.039,17,0.558,18,0.479,19,0.405,38,0.558,39,0.335,40,0.033,41,0.033,47,0.64,61,0.781,62,1.401,122,1.729,123,2.071,124,1.573,127,2.071,205,2.47,271,3.444,272,3.298,273,4.017,274,4.017]],["title/interfaces/RequestWithUser.html",[53,1.822,226,1.613]],["body/interfaces/RequestWithUser.html",[12,0.04,17,0.538,18,0.463,19,0.391,22,0.87,38,0.538,40,0.033,41,0.033,47,0.619,53,3.2,60,1.666,61,0.619,104,2.386,122,1.692,226,2.113,227,2.728,239,2.33,275,3.185,276,3.185,277,5.205,278,3.185,279,3.185]],["title/classes/UpdateUserDto.html",[39,0.247,280,1.822]],["body/classes/UpdateUserDto.html",[12,0.041,17,0.457,18,0.393,19,0.332,22,0.928,38,0.457,39,0.36,40,0.029,41,0.029,47,0.525,54,2.351,60,0.941,61,0.688,62,1.235,65,1.378,66,1.463,99,1.599,122,1.524,123,1.888,124,1.463,205,2.023,207,2.313,210,3.544,216,2.701,220,3.544,221,3.544,223,2.313,224,3.387,239,1.599,280,2.655,281,3.956,282,3.29,283,4.199,284,3.29,285,3.29,286,3.29,287,2.701,288,2.701,289,2.313,290,3.29]],["title/entities/User.html",[60,0.847,291,2.083]],["body/entities/User.html",[12,0.041,17,0.292,18,0.251,19,0.212,22,0.761,38,0.292,39,0.262,40,0.021,41,0.021,47,0.602,49,1.531,54,2.663,59,0.824,60,0.901,61,0.848,62,1.398,65,1.08,66,1.2,69,1.022,99,1.022,114,0.824,122,1.112,123,1.481,124,1.47,127,1.848,161,1.937,182,1.293,191,2.215,224,3.437,225,2.949,291,1.478,292,1.478,293,1.727,294,4.665,295,3.778,296,2.656,297,3.778,298,3.778,299,3.778,300,4.195,301,2.103,302,2.103,303,2.103,304,5.029,305,5.029,306,5.029,307,3.15,308,2.103,309,2.103,310,2.103,311,3.15,312,2.103,313,2.103,314,2.103,315,3.15,316,2.103,317,2.103,318,2.103,319,4.493,320,3.15,321,3.15,322,3.15,323,3.15,324,1.727,325,3.15,326,1.727,327,2.215,328,1.478,329,2.103,330,2.103,331,2.103,332,3.15,333,2.103,334,1.727,335,2.103,336,2.103]],["title/controllers/UsersController.html",[42,1.613,337,1.822]],["body/controllers/UsersController.html",[12,0.041,17,0.358,18,0.308,19,0.26,22,0.838,23,0.663,37,1.254,38,0.358,39,0.215,40,0.025,41,0.025,42,1.405,45,2.118,47,0.411,48,1.594,54,2.517,61,0.677,62,1.322,64,1.665,65,1.215,66,1.215,68,1.811,77,1.594,83,2.118,84,3.002,98,2.118,99,1.254,103,1.587,107,1.814,108,1.405,114,1.912,124,1.548,157,1.665,182,1.587,280,3.273,296,3.562,337,2.249,338,2.118,339,2.118,340,3.794,341,3.002,342,3.002,343,3.002,344,2.581,345,2.118,346,3.657,347,2.581,348,2.118,349,3.657,350,2.581,351,2.118,352,3.657,353,2.581,354,2.581,355,2.581,356,2.118,357,2.581,358,2.581,359,2.581,360,2.581,361,2.581,362,2.581,363,2.581,364,2.581,365,2.581,366,2.581,367,2.581,368,2.581]],["title/modules/UsersModule.html",[0,1.291,13,1.44]],["body/modules/UsersModule.html",[0,2.089,2,1.582,3,1.582,4,2.001,5,2.001,6,1.582,7,2.947,8,2.947,12,0.041,13,2.693,14,2.636,15,2.001,16,2.001,17,0.452,18,0.388,19,0.328,21,2.001,22,0.986,23,0.836,28,2.672,29,2.001,30,2.636,31,1.419,37,2.083,38,0.452,39,0.271,40,0.029,41,0.029,60,0.931,157,2.283,289,2.288,337,2.947,356,2.672,369,2.672,370,2.672,371,2.672,372,3.255,373,3.255,374,3.255]],["title/injectables/UsersService.html",[149,0.681,157,1.161]],["body/injectables/UsersService.html",[12,0.042,17,0.157,18,0.135,19,0.114,22,0.647,23,0.29,29,0.694,31,0.492,38,0.157,39,0.094,40,0.013,41,0.013,47,0.18,48,0.834,49,2.609,59,1.49,60,1.354,61,0.664,62,1.233,64,1.633,65,1.191,66,1.191,68,1.633,69,2.526,77,1.934,79,2.347,103,0.694,108,1.042,113,2.308,114,1.886,123,1.633,124,1.02,127,0.75,143,1.847,149,0.44,150,0.492,155,1.177,157,0.75,161,2.911,167,0.794,171,2.045,172,0.927,177,1.345,179,1.571,182,2.337,191,3.119,202,3.643,289,0.794,296,3.708,324,0.927,339,0.927,340,2.408,341,1.571,342,2.045,343,2.045,345,1.571,348,1.571,351,1.571,375,0.927,376,2.491,377,1.914,378,1.914,379,1.914,380,1.914,381,1.129,382,2.408,383,1.129,384,1.914,385,1.914,386,1.129,387,1.914,388,1.129,389,1.914,390,1.129,391,1.129,392,1.914,393,1.129,394,1.914,395,1.129,396,1.914,397,1.129,398,1.129,399,3.566,400,2.491,401,1.129,402,1.914,403,1.914,404,1.129,405,1.129,406,3.283,407,1.129,408,3.998,409,3.283,410,3.998,411,4.311,412,3.283,413,3.566,414,1.129,415,1.129,416,1.129,417,1.129,418,1.129,419,1.129,420,1.129,421,1.129,422,1.129,423,1.129,424,1.129,425,1.129,426,1.129,427,2.491,428,2.491,429,1.129,430,1.129,431,2.491,432,1.129,433,1.129,434,1.129,435,1.129,436,1.129,437,1.129,438,1.129,439,1.129,440,1.129,441,1.129,442,1.129,443,1.129]],["title/coverage.html",[444,2.83]],["body/coverage.html",[6,1.272,12,0.04,19,0.264,26,1.84,32,1.84,39,0.357,40,0.025,41,0.025,42,2.012,43,1.61,44,2.149,53,1.61,60,0.749,61,0.417,77,1.141,79,1.425,87,1.141,89,1.61,100,1.61,138,1.425,139,1.425,143,1.272,149,1.17,151,2.149,157,1.026,174,1.425,206,2.149,207,2.597,226,2.012,228,2.149,229,2.149,230,2.149,231,2.597,242,2.149,261,2.149,263,2.149,271,1.84,272,2.149,275,2.149,276,2.149,280,1.61,281,2.149,291,1.84,293,2.149,327,1.84,328,1.84,337,1.61,338,2.149,375,2.149,444,1.84,445,2.618,446,2.618,447,2.618,448,3.033,449,5.09,450,2.149,451,5.866,452,5.343,453,2.149,454,2.149,455,2.149,456,4.281,457,4.281,458,2.149,459,4.281,460,3.694,461,2.618,462,4.905,463,3.694,464,2.618,465,2.618,466,3.27,467,2.149,468,2.618,469,2.618]],["title/dependencies.html",[3,1.729,470,2.039]],["body/dependencies.html",[3,1.678,12,0.041,23,0.886,29,2.123,31,1.505,39,0.371,40,0.03,41,0.03,99,1.678,145,2.427,223,2.427,238,1.88,250,3.132,251,2.834,268,2.834,278,2.834,287,2.834,288,2.834,326,2.834,471,3.453,472,3.453,473,5.211,474,3.453,475,3.453,476,3.453,477,3.453,478,4.455,479,3.453,480,3.453,481,3.453,482,2.834,483,3.453,484,3.453,485,3.453,486,3.453,487,3.453,488,3.453,489,3.453,490,3.453,491,3.453,492,3.453,493,3.453,494,3.453,495,3.453,496,3.453]],["title/miscellaneous/functions.html",[497,1.527,498,2.921]],["body/miscellaneous/functions.html",[6,2.358,12,0.037,40,0.03,41,0.03,47,0.532,59,1.708,61,0.695,64,1.708,65,1.246,66,1.246,68,1.708,69,2.5,124,1.565,127,2.216,327,3.616,328,3.411,334,3.984,458,2.741,466,2.347,482,2.741,497,2.053,498,2.741,499,3.339,500,3.578,501,3.339,502,4.359,503,3.339,504,4.853,505,4.853,506,3.339,507,3.339,508,4.359,509,3.339,510,3.339,511,3.339,512,3.339,513,3.339,514,3.339,515,3.339,516,3.339]],["title/index.html",[47,0.396,517,2.483,518,2.483]],["body/index.html",[12,0.04,18,0.379,40,0.029,41,0.029,59,1.245,72,2.607,382,2.607,444,2.232,519,3.175,520,3.175,521,4.217,522,3.175,523,3.175,524,3.175,525,3.175,526,3.175,527,3.175,528,4.735,529,3.175,530,3.175,531,3.175,532,5.508,533,3.175,534,3.175,535,5.397,536,3.175,537,3.175,538,4.217,539,3.175,540,3.175,541,3.175,542,3.175,543,4.217,544,4.217,545,3.175,546,3.175,547,3.175,548,4.217,549,4.217,550,3.175,551,3.175,552,3.175,553,3.175,554,3.175,555,2.607,556,3.175,557,3.175,558,3.175,559,3.175,560,3.175,561,3.175,562,3.175,563,3.175,564,3.175,565,3.175,566,2.607,567,3.175,568,3.175,569,3.175,570,3.175,571,3.175,572,3.175,573,2.607]],["title/modules.html",[2,1.956]],["body/modules.html",[1,2.658,2,2.101,11,2.354,12,0.035,13,2.101,40,0.035,41,0.035,555,4.478,574,5.454,575,5.454,576,5.454]],["title/overview.html",[577,3.304]],["body/overview.html",[0,1.413,1,3.339,2,1.576,3,1.576,4,1.994,5,1.994,6,1.576,7,1.994,8,1.994,9,2.663,10,2.663,11,3.17,12,0.039,13,2.69,14,2.63,15,1.994,16,1.994,37,1.576,40,0.029,41,0.029,87,2.413,134,2.663,135,2.663,137,2.663,138,2.605,139,2.605,150,1.413,157,2.17,205,1.994,227,2.28,292,2.28,369,2.663,370,2.663,371,2.663,577,2.663,578,4.277,579,4.277,580,3.243,581,3.243]],["title/properties.html",[122,1.256,470,2.039]],["body/properties.html",[12,0.04,40,0.035,41,0.035,59,1.735,122,1.563,566,3.635,573,3.635,582,4.428,583,4.428,584,4.428]],["title/miscellaneous/variables.html",[497,1.527,585,2.921]],["body/miscellaneous/variables.html",[12,0.041,19,0.287,21,1.751,26,2.754,27,2.337,30,1.751,32,2.754,33,2.337,40,0.027,41,0.027,47,0.454,61,0.806,79,1.55,120,2.337,124,1.12,143,2.54,225,3.555,279,4.291,283,3.216,292,2.002,294,2.337,448,2.337,450,3.216,453,3.216,454,2.337,455,2.337,466,2.002,467,3.216,497,1.751,500,3.216,585,3.216,586,3.917,587,2.847,588,2.847,589,5.227,590,2.847,591,2.847,592,2.847,593,2.847,594,2.847,595,2.847,596,2.847,597,2.847,598,2.847,599,2.847,600,2.847,601,2.847,602,2.847,603,2.847,604,2.847,605,2.847,606,3.917,607,2.847,608,2.847,609,2.847,610,2.847,611,2.847,612,2.847,613,2.847,614,2.847,615,2.847,616,2.847,617,2.847,618,2.847,619,2.847,620,2.847,621,3.917,622,2.847,623,2.847]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":583,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":580,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["10.2.5",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["123456",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["15m",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.10.2",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":579,"title":{},"body":{"overview.html":{}}}],["200",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["23505",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["255",{"_index":306,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":578,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":581,"title":{},"body":{"overview.html":{}}}],["6.11.2",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["7.1.11",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.11.3",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["against",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["algorithm",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["algorithms",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["already",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":556,"title":{},"body":{"index.html":{}}}],["api",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation({summary",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["apiproperty()@column({type",{"_index":311,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@createdatecolumn",{"_index":301,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@index()@column({type",{"_index":303,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@primarygeneratedcolumn",{"_index":309,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@updatedatecolumn",{"_index":317,"title":{},"body":{"entities/User.html":{}}}],["apiproperty({description",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiresponse",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["application/json",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["applicationname",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":527,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth(@req",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(request",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":231,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:6",{"_index":235,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["authcontroller",{"_index":43,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":237,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":240,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":262,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":566,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":87,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autosave",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":557,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('invalid",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt",{"_index":482,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["beforeinsert",{"_index":323,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":576,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":574,"title":{},"body":{"modules.html":{}}}],["building",{"_index":522,"title":{},"body":{"index.html":{}}}],["catch",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":39,"title":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":369,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":370,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":371,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":319,"title":{},"body":{"entities/User.html":{}}}],["compare",{"_index":327,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["compare(password",{"_index":336,"title":{},"body":{"entities/User.html":{}}}],["compare(plaintext",{"_index":501,"title":{},"body":{"miscellaneous/functions.html":{}}}],["comparepassword(password",{"_index":335,"title":{},"body":{"entities/User.html":{}}}],["compares",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["configmodule.forroot",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('database_url",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('secret_text",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.getorthrow('jwt_access_token_secret",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["const",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":264,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":381,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["context",{"_index":236,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":241,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":42,"title":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":444,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":376,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(@body",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":385,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdat",{"_index":295,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn",{"_index":320,"title":{},"body":{"entities/User.html":{}}}],["createuser",{"_index":377,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(dto",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":77,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["database",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["database_url",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":300,"title":{},"body":{"entities/User.html":{}}}],["date.now",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":279,"title":{},"body":{"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":534,"title":{},"body":{"index.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":389,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.email",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/create",{"_index":404,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/update",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["e.code",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["e2e",{"_index":545,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":523,"title":{},"body":{"index.html":{}}}],["email",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":292,"title":{},"body":{"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/user.entity",{"_index":289,"title":{},"body":{"classes/UpdateUserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":291,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entity('users",{"_index":330,"title":{},"body":{"entities/User.html":{}}}],["entitynotfounderror",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["entitynotfounderror(user",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["environment",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["erp",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["error",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["example",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["exclude",{"_index":325,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column({type",{"_index":313,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":234,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exists",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":239,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["extra",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":256,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fail",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["false",{"_index":283,"title":{},"body":{"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["fastify",{"_index":278,"title":{},"body":{"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["fastify/static",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["fastifyrequest",{"_index":277,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["find",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":521,"title":{},"body":{"index.html":{}}}],["function",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":498,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(userid",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@useguards(jwtauthguard)@apibearerauth()@apioperation({summary",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthenticateduser",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["getauthenticateduser(email",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["getbyid",{"_index":378,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":392,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrequest",{"_index":232,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["getrequest(context",{"_index":233,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["getting",{"_index":517,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":379,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuser(query",{"_index":394,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail",{"_index":380,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":396,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":552,"title":{},"body":{"index.html":{}}}],["guards/jwt",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["hash",{"_index":328,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hash(password",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hash(this.password",{"_index":333,"title":{},"body":{"entities/User.html":{}}}],["hashed",{"_index":334,"title":{},"body":{"entities/User.html":{},"miscellaneous/functions.html":{}}}],["hashedtext",{"_index":502,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hashes",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hashpassword",{"_index":331,"title":{},"body":{"entities/User.html":{}}}],["here",{"_index":563,"title":{},"body":{"index.html":{}}}],["hs384",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["https://nestjs.com",{"_index":570,"title":{},"body":{"index.html":{}}}],["iat",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthPayload.html":{}}}],["iauthpayload",{"_index":174,"title":{"interfaces/IAuthPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["id",{"_index":296,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":149,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":531,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":533,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["interface",{"_index":226,"title":{"interfaces/IAuthPayload.html":{},"interfaces/RequestWithUser.html":{}},"body":{"interfaces/IAuthPayload.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":227,"title":{},"body":{"interfaces/IAuthPayload.html":{},"interfaces/RequestWithUser.html":{},"overview.html":{}}}],["interfaces/auth",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces/request",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["isemail",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemail()@apiproperty({required",{"_index":282,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isnotempty",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@apiproperty({required",{"_index":284,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["joi",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["joi.number().default(3000",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.objectschema",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().default('development",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":559,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":251,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expiration_time",{"_index":450,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwt_access_token_secret",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":453,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":100,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":255,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":138,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":567,"title":{},"body":{"index.html":{}}}],["kareem",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["kareem.adel.zayed@gmail.com",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":305,"title":{},"body":{"entities/User.html":{}}}],["license",{"_index":573,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":549,"title":{},"body":{"index.html":{}}}],["local",{"_index":268,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":89,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":139,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(request",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":271,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["lognotifications",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":497,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":548,"title":{},"body":{"index.html":{}}}],["mode",{"_index":538,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":562,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":568,"title":{},"body":{"index.html":{}}}],["name",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":528,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":572,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":287,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":238,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":520,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":402,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":532,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":315,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthPayload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["one",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["online",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":550,"title":{},"body":{"index.html":{}}}],["optional",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["ormoptionsfactory",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":577,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":470,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parameters",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":400,"title":{},"body":{"injectables/UsersService.html":{}}}],["partialtype",{"_index":286,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(user",{"_index":290,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":250,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":252,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":253,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["passwords",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["patch",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":229,"title":{},"body":{"interfaces/IAuthPayload.html":{},"coverage.html":{}}}],["pg",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["plain",{"_index":504,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintext",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintextpassword",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":560,"title":{},"body":{"index.html":{}}}],["port",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apioperation({summary",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":322,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":540,"title":{},"body":{"index.html":{}}}],["profile",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile.id",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile.refresh_token",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["progressive",{"_index":519,"title":{},"body":{"index.html":{}}}],["project",{"_index":551,"title":{},"body":{"index.html":{}}}],["promise",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":122,"title":{"properties.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["protected",{"_index":297,"title":{},"body":{"entities/User.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":294,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["read",{"_index":561,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":298,"title":{},"body":{"entities/User.html":{}}}],["register",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registrationdata",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registrationdata",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["rejectunauthorized",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":382,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestbody",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestwithuser",{"_index":53,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":535,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":524,"title":{},"body":{"index.html":{}}}],["schema",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret_text",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":525,"title":{},"body":{"index.html":{}}}],["side",{"_index":526,"title":{},"body":{"index.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":554,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.helper.ts",{"_index":500,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/constants.ts",{"_index":448,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database.ts",{"_index":454,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environment.ts",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:30",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:38",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:66",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:10",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:22",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:36",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:52",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:65",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/login.dto.ts",{"_index":272,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/login.dto.ts:2",{"_index":273,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dto/login.dto.ts:3",{"_index":274,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/guards/jwt",{"_index":230,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":261,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/auth",{"_index":228,"title":{},"body":{"interfaces/IAuthPayload.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/request",{"_index":275,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts",{"_index":242,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts:21",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts:9",{"_index":245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategy/local.strategy.ts",{"_index":263,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:14",{"_index":267,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:8",{"_index":265,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/users/dto/create",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":281,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":293,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:18",{"_index":310,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:22",{"_index":312,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:27",{"_index":308,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:31",{"_index":314,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:35",{"_index":302,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:39",{"_index":318,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/entities/user.entity.ts:43",{"_index":316,"title":{},"body":{"entities/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:19",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:24",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:29",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:34",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":372,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":375,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:106",{"_index":398,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:123",{"_index":397,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:137",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:14",{"_index":383,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:21",{"_index":393,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:29",{"_index":395,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:44",{"_index":386,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:61",{"_index":401,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:81",{"_index":390,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:89",{"_index":391,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/helpers/hash.helper.ts",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ssl",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":536,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":539,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":541,"title":{},"body":{"index.html":{}}}],["started",{"_index":518,"title":{"index.html":{}},"body":{}}],["starter",{"_index":530,"title":{},"body":{"index.html":{}}}],["statements",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["stay",{"_index":564,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":249,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strong",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":254,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":555,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":575,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":544,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":547,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":546,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["tests",{"_index":543,"title":{},"body":{"index.html":{}}}],["text",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["thanks",{"_index":553,"title":{},"body":{"index.html":{}}}],["this.authservice.generatetoken(user.id",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getauthenticateduser(email",{"_index":270,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.register(registrationdata",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":332,"title":{},"body":{"entities/User.html":{}}}],["this.userrepository.create",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findonebyorfail",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(user",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(registrationdata",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(payload.userid",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.getuser(query",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.remove(+id",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(profile.id",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["time",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["touch",{"_index":565,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":326,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["trigger",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["triggerrefreshtoken",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["triggerrefreshtoken(query",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["true",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isemail",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isnotempty",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isstring",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["try",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["twitter",{"_index":571,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthPayload.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":324,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["typeormmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":374,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(ormoptionsfactory",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":288,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":529,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["undefined})@useguards(localauthenticationguard)@post('login",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["unique",{"_index":307,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":542,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":584,"title":{},"body":{"properties.html":{}}}],["unprocessableentityexception",{"_index":403,"title":{},"body":{"injectables/UsersService.html":{}}}],["unprocessableentityexception(e.message",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["unprocessableentityexception(error.errmsg",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["update",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":299,"title":{},"body":{"entities/User.html":{}}}],["updatedatecolumn",{"_index":321,"title":{},"body":{"entities/User.html":{}}}],["updateresult",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateresult.affected",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["updates",{"_index":399,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":280,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["url",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthenticationguard",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":60,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apibody({type",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@apiresponse({status",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:21",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":285,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.interface",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.interface.ts",{"_index":276,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user?.comparepassword(plaintextpassword",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthPayload.html":{}}}],["usernamefield",{"_index":269,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":384,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":373,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/user.entity",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":337,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":13,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":157,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":516,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/helpers",{"_index":329,"title":{},"body":{"entities/User.html":{}}}],["validate",{"_index":243,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":266,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationenvschema",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationschema",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":304,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":585,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":582,"title":{},"body":{"properties.html":{}}}],["very",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["watch",{"_index":537,"title":{},"body":{"index.html":{}}}],["website",{"_index":569,"title":{},"body":{"index.html":{}}}],["whether",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["you'd",{"_index":558,"title":{},"body":{"index.html":{}}}],["zayed",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { UsersModule } from './modules/users/users.module';\nimport { OrmOptionsFactory } from './database';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\nimport { ValidationEnvSchema } from './environment';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ validationSchema: ValidationEnvSchema }),\n    TypeOrmModule.forRootAsync(OrmOptionsFactory),\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                auth\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                logIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        auth\n                        \n                    \n                \n            \n            \n                \n                    \n                    auth(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard)@ApiBearerAuth()@ApiOperation({summary: 'Get authenticated user'})@ApiResponse({status: 200, description: 'Get authenticated user', type: User})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Login (APP)', requestBody: undefined})@UseGuards(LocalAuthenticationGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Register a new user'})@ApiBody({type: CreateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, UseGuards, Req } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthenticationGuard } from './guards/local-auth.guard';\nimport RequestWithUser from './interfaces/request-with-user.interface';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { User } from '../users/entities/user.entity';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get()\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get authenticated user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Get authenticated user',\n    type: User,\n  })\n  async auth(@Req() request: RequestWithUser): Promise {\n    const { user } = request;\n    return user;\n  }\n\n  @Post('register')\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiBody({ type: CreateUserDto })\n  async register(@Body() registrationData: CreateUserDto): Promise {\n    return this.authService.register(registrationData);\n  }\n\n  @ApiOperation({\n    summary: 'Login (APP)',\n    requestBody: {\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              email: {\n                type: 'string',\n                example: 'test@example.com',\n              },\n              password: {\n                type: 'string',\n                example: 'my-very-strong-password',\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('login')\n  async logIn(\n    @Req() request: RequestWithUser,\n  ): Promise {\n    const { user } = request;\n    const token = this.authService.generateToken(user.id);\n    return { user, token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { LocalStrategy } from './strategy/local.strategy';\n\n@Module({\n  imports: [UsersModule, ConfigModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, LocalStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateToken\n                            \n                            \n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                triggerRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateToken\n                        \n                    \n                \n            \n            \n                \ngenerateToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        triggerRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    triggerRefreshToken(query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../users/users.service';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../users/entities/user.entity';\nimport { IAuthPayload } from './interfaces/auth-payload.interface';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * @description Generate One Time Auth Code for user\n   * @param userId\n   * @return {string}\n   */\n  generateToken(userId: number): string {\n    return this.jwtService.sign(\n      { userId },\n      {\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n        algorithm: 'HS384',\n      },\n    );\n  }\n\n  /**\n   * @description Trigger refresh token for user\n   * @param query\n   */\n  async triggerRefreshToken(query: string): Promise {\n    const profile: User = await this.usersService.getUser(query);\n    const payload: IAuthPayload = { userId: profile.id, iat: Date.now() };\n    profile.refresh_token = this.jwtService.sign(\n      payload,\n      this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n    );\n    await this.usersService.update(profile.id, profile);\n    return profile.refresh_token;\n  }\n\n  /**\n   * @description Generate One Time Auth Code for user\n   * @param email\n   * @param plainTextPassword\n   */\n  async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    const user = await this.usersService.getUserByEmail(email);\n    if (!(await user?.comparePassword(plainTextPassword)))\n      throw new BadRequestException('Invalid password');\n    return user;\n  }\n\n  /**\n   * @description Register a new user\n   * @param registrationData\n   * @return {User}\n   */\n\n  async register(registrationData: CreateUserDto): Promise {\n    return await this.usersService.create(registrationData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'kareem.adel.zayed@gmail.com', type: () => String, required: true})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User name', example: 'Kareem Zayed', type: () => String, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: '123456', type: () => String, required: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'User name',\n    example: 'Kareem Zayed',\n    type: () => String,\n    required: true,\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: 'User email',\n    example: 'kareem.adel.zayed@gmail.com',\n    type: () => String,\n    required: true,\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'User password',\n    example: '123456',\n    type: () => String,\n    required: true,\n  })\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthPayload.html":{"url":"interfaces/IAuthPayload.html","title":"interface - IAuthPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IAuthPayload {\n  userId: number;\n  iat?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt-auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    return context.switchToHttp().getRequest();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from '../../users/users.service';\nimport { IAuthPayload } from '../interfaces/auth-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.getOrThrow('JWT_ACCESS_TOKEN_SECRET'),\n      algorithms: ['HS384'],\n    });\n  }\n\n  async validate(payload: IAuthPayload) {\n    return this.usersService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { User } from '../../users/entities/user.entity';\nimport { Strategy } from 'passport-local';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/request-with-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    FastifyRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FastifyRequest } from 'fastify';\nimport { User } from '../../users/entities/user.entity';\n\ninterface RequestWithUser extends FastifyRequest {\n  user: User;\n}\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { User } from '../entities/user.entity';\nimport { IsEmail, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class UpdateUserDto extends PartialType(User) {\n  @IsString()\n  @ApiProperty({ required: false })\n  name?: string;\n\n  @IsEmail()\n  @ApiProperty({ required: false })\n  email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    \n                                    Protected\n                                password\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                refresh_token\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Index()@Column({type: 'varchar', length: 255, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Protected\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  Index,\n  BeforeInsert,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { compare, hash } from '../../../utils/helpers';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity('users')\nexport class User {\n  @ApiProperty()\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @ApiProperty()\n  @Column({ type: 'varchar', length: 255 })\n  public name: string;\n\n  @ApiProperty()\n  @Index()\n  @Column({ type: 'varchar', length: 255, unique: true })\n  public email: string;\n\n  @Exclude()\n  @Column({ type: 'varchar', length: 255 })\n  protected password: string;\n\n  @ApiProperty()\n  @CreateDateColumn()\n  public createdAt: Date;\n\n  @ApiProperty()\n  @UpdateDateColumn()\n  public updatedAt?: Date;\n\n  @ApiProperty()\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  public refresh_token?: string;\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await hash(this.password);\n  }\n\n  /**\n   * @description Compare password with hashed password\n   * @param password\n   */\n  public async comparePassword(password: string): Promise {\n    return await compare(password, this.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /*\n    @Post()\n    create(@Body() createUserDto: CreateUserDto) {\n      return this.usersService.create(createUserDto);\n    }\n    */\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), ConfigModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updates: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updates\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository, EntityNotFoundError } from 'typeorm';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async getById(id: number): Promise {\n    try {\n      return await this.userRepository.findOneOrFail({ where: { id } });\n    } catch (e) {\n      throw new NotFoundException(`User with id ${id} not found`);\n    }\n  }\n\n  async getUser(query: string): Promise {\n    try {\n      return await this.userRepository.findOneOrFail({\n        where: { email: query },\n      });\n    } catch (e) {\n      throw new NotFoundException(`User with email ${query} not found`);\n    }\n  }\n\n  /**\n   * @description Create user\n   * @param {CreateUserDto} createUserDto\n   * @return {Promise}\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    try {\n      const user = this.userRepository.create(createUserDto);\n      return await this.userRepository.save(user);\n    } catch (e) {\n      if (e.code === '23505')\n        throw new BadRequestException('User with this email already exists');\n      throw new UnprocessableEntityException(e.message);\n    }\n  }\n\n  /**\n   * @description Update user by id\n   * @param {number} id\n   * @param updates\n   * @return {Promise}\n   */\n  async update(id: number, updates: Partial): Promise {\n    try {\n      const user = await this.userRepository.findOneOrFail({ where: { id } });\n      const updateResult = await this.userRepository.update({ id }, updates);\n      if (updateResult.affected) {\n        return { ...user, ...updates, password: undefined } as unknown as User;\n      } else {\n        throw new EntityNotFoundError(User, id);\n      }\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(`User with id ${id} not found`);\n      }\n    }\n  }\n\n  /**\n   * @description Find all users\n   * @return {Promise}\n   */\n  async findAll(): Promise {\n    return await this.userRepository.find();\n  }\n\n  /**\n   * @description Find one user by id or fail\n   * @param id\n   */\n  async findOne(id: number): Promise {\n    try {\n      return await this.userRepository.findOneOrFail({ where: { id } });\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(`User with id ${id} not found`);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @description Remove user by id\n   * @param {number} id\n   * @return {Promise}\n   * @throws {EntityNotFoundError}\n   */\n  async remove(id: number): Promise {\n    try {\n      const user = await this.userRepository.findOneByOrFail({ id });\n      return await this.userRepository.remove(user);\n    } catch (e) {\n      if (e instanceof EntityNotFoundError) {\n        throw new NotFoundException(`User with id ${id} not found`);\n      }\n    }\n  }\n\n  /**\n   * @description Find one user by email\n   * @param email\n   * @return {User}\n   * @throws {NotFoundException}\n   */\n  async getUserByEmail(email: string): Promise {\n    try {\n      return await this.userRepository.findOneOrFail({ where: { email } });\n    } catch (err) {\n      throw new NotFoundException('User could not found by given email');\n    }\n  }\n\n  /**\n   * @description\n   * @param {CreateUserDto} dto\n   * @return {User}\n   * @throws {UnprocessableEntityException}\n   */\n  async createUser(dto: CreateUserDto): Promise {\n    const newUser: User = this.userRepository.create({\n      email: dto.email,\n      password: dto.password,\n    });\n    try {\n      return await this.userRepository.save(newUser);\n    } catch (error) {\n      throw new UnprocessableEntityException(error.errmsg);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            JWT_ACCESS_TOKEN_EXPIRATION_TIME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            JWT_REFRESH_TOKEN_EXPIRATION_TIME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database.ts\n            \n            variable\n            OrmOptionsFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environment.ts\n            \n            variable\n            ValidationEnvSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth-payload.interface.ts\n            \n            interface\n            IAuthPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/request-with-user.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/utils/helpers/hash.helper.ts\n            \n            function\n            compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helpers/hash.helper.ts\n            \n            function\n            hash\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helpers/hash.helper.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/helpers/hash.helper.ts\n            \n            variable\n            secret_text\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @fastify/static : ^6.11.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-fastify : ^10.2.5\n        \n            @nestjs/swagger : ^7.1.11\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            joi : ^17.10.2\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.11.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            compare   (src/.../hash.helper.ts)\n                        \n                        \n                            hash   (src/.../hash.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/helpers/hash.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(plainText: string, hashedText: string)\n                \n            \n\n\n\n\n            \n                \n                    Compares a plain text password with a hashed password.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plainText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe plain text password to compare.\n\n\n                                    \n                                \n                                \n                                    hashedText\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe hashed password to compare against.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves with a boolean indicating whether the passwords match.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n            \n                \nhash(password: string)\n                \n            \n\n\n\n\n            \n                \n                    Hashes a password using bcrypt.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe plain text password to hash.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves with the hashed password.\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configService   (src/.../hash.helper.ts)\n                        \n                        \n                            JWT_ACCESS_TOKEN_EXPIRATION_TIME   (src/.../constants.ts)\n                        \n                        \n                            JWT_REFRESH_TOKEN_EXPIRATION_TIME   (src/.../constants.ts)\n                        \n                        \n                            OrmOptionsFactory   (src/.../database.ts)\n                        \n                        \n                            secret_text   (src/.../hash.helper.ts)\n                        \n                        \n                            ValidationEnvSchema   (src/.../environment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/helpers/hash.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        secret_text\n                        \n                    \n                \n            \n                \n                    \n                        Default value : configService.get('SECRET_TEXT')\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_ACCESS_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '15m'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_REFRESH_TOKEN_EXPIRATION_TIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '7d'\n                    \n                \n\n\n        \n    \n\n    src/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OrmOptionsFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleAsyncOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  useFactory: (configService: ConfigService) => ({\n    type: 'postgres',\n    url: configService.get('DATABASE_URL'),\n    applicationName: 'ERP-API',\n    autoLoadEntities: true,\n    entities: [__dirname + 'dist/**/*.entity{.ts,.js}'],\n    /*\n    // For Online Database [Public]\n      ssl: false,\n      extra: {\n        ssl: {\n          rejectUnauthorized: false,\n        },\n      },\n\n      */\n    synchronize: true,\n    autoSave: true,\n    logging: true,\n    logger: 'file',\n    logNotifications: true,\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationEnvSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Joi.ObjectSchema\n\n                    \n                \n                \n                    \n                        Default value : Joi.object({\n  PORT: Joi.number().default(3000),\n  NODE_ENV: Joi.string().default('development'),\n\n  DATABASE_URL: Joi.string().required(),\n\n  JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n})\n                    \n                \n\n            \n                \n                    Environment variables schema for validation.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
